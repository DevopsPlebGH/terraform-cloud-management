name: Create Terraform Cloud Organization

on:
  workflow_dispatch:
    inputs:
      admin_email:
        description: 'Admin Email'
        required: true
        type: string
      name:
        description: 'Organization Name'
        required: true
        type: string

defaults:
  run:
    working-directory: ./terraform

jobs:
  create_org:
    name: Create Terraform Cloud Organization
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Initialize Terraform
        run: |
          terraform init -input=false
      - name: Plan Terraform
        id: plan
        continue-on-error: true
        run: |
          terraform plan -input=false -out=tfplan \
          && terraform show tfplan
        env:
          TF_VAR_admin_email: ${{ inputs.admin_email }}
          TF_VAR_name: ${{ inputs.name }}
          TF_VAR_oauth_token: ${{ secrets.OAUTH_TOKEN }}
      - name: Apply Terraform
        if: steps.plan.outcome == 'success'
        id: apply
        continue-on-error: true
        env:
          TF_VAR_admin_email: ${{ inputs.admin_email }}
          TF_VAR_name: ${{ inputs.name }}
          TF_VAR_oauth_token: ${{ secrets.OAUTH_TOKEN }}
        run: |
          REPO="${{ github.repository }}"
          BASEURI="https://api.github.com"
          ARTIFACTURI="${BASEURI}/repos/${REPO}/actions/artifacts"
          TOKEN="${{ github.token }}"
          ENCRYPTION_KEY="${{ secrets.ENCRYPTION_KEY }}"

          get_artifacts () {
            curl \
              -w "%{http_code}" \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: token ${{ github.token }}" \
              $ARTIFACTURI
          }

          backend_config () {
            cat <<'EOF'>> tfbackend.tf
          resource "local_file" "backend" {
            depends_on = [
              module.organization,
              module.oauth_client
            ]
            content  = <<-EOT
            workspaces { name = "tfc-org-${module.organization.tfe_organization_id}}
            hostname = "app.terraform.io"
            organization = "${module.organization.tfe_organization_id}"
            EOT
            filename = "${path.module}/config.remote.tfbackend"
          }
          EOF
          }

          response=$(get_artifacts)
          http_code=$(tail -n1 <<< "$response")
          content=$(sed '$d' <<< "$response")
          most_recent_artifact_uri=$content | jq '[.artifacts[] | select(.name == "terraformstatefile" and .expired == false) | .archive_download_url][0]'

          if [[ $http_code -eq 200 ]]; then
            most_recent_artifact_uri=$(echo "$content" | jq '[.artifacts[] | select(.name == "terraformstatefile" and .expired == false) | .archive_download_url][0]')
            echo "Most recent artifact URI is: " $most_recent_artifact_uri | tr -d '"'
            curl \
            -H "Authorization: token ${TOKEN}" \
            -H "Accept: application/vnd.github.v3.raw" \
            -L $(echo "$most_recent_artifact_uri" | tr -d '"') \
            -o ./state.zip
            unzip ./state.zip
            openssl enc -d -in ./terraform.tfstate.enc -aes-256-cbc -pbkdf2 -pass pass:"${{ secrets.ENCRYPTION_KEY }}" -out ./terraform.tfstate
            backend_config
          else
            echo "fail"
            exit 0
          fi

      - name: Display Files
        run: ls
