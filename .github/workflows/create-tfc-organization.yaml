name: Create Terraform Cloud Organization

on:
  workflow_dispatch:
    inputs:
      admin_email:
        description: 'Admin Email'
        required: true
        type: string
      name:
        description: 'Organization Name'
        required: true
        type: string

defaults:
  run:
    working-directory: ./terraform

jobs:
  create_org:
    name: Create Terraform Cloud Organization
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Initialize Terraform
        run: |
          terraform init -input=false
      - name: Plan Terraform
        id: plan
        continue-on-error: true
        run: |
          terraform plan -input=false -out=tfplan \
          && terraform show tfplan
        env:
          TF_VAR_admin_email: ${{ inputs.admin_email }}
          TF_VAR_name: ${{ inputs.name }}
          TF_VAR_oauth_token: ${{ secrets.OAUTH_TOKEN }}
      - name: Apply Terraform
        if: steps.plan.outcome == 'success'
        id: apply
        continue-on-error: true
        env:
          TF_VAR_admin_email: ${{ inputs.admin_email }}
          TF_VAR_name: ${{ inputs.name }}
          TF_VAR_oauth_token: ${{ secrets.OAUTH_TOKEN }}
        run: |
          Get-ChildItem -Path Env: -Recurse -Include TF_VAR_* | ForEach-Object {Write-Output "$($_.Name)=$($_.Value)"} >> $env:GITHUB_ENV
          $Repo = "${{ github.repository }}"
          $BaseUri = "https://api.github.com"
          $ArtifactUri = "$BaseUri/repos/$Repo/actions/artifacts"
          $Token = "${{ github.token }}" | ConvertTo-SecureString -AsPlainText
          $RestResponse = Invoke-RestMethod -Authentication Bearer -Uri $ArtifactUri -Token $Token | Select-Object -ExpandProperty artifacts
          if ($RestResponse){
            $MostRecentArtifactURI = $RestResponse | Sort-Object -Property created_at -Descending | where name -eq "terraformstatefile" | Select-Object -First 1 | Select-Object -ExpandProperty archive_download_url
            Write-Host "Most recent artifact URI = $MostRecentArtifactURI"
            if ($MostRecentArtifactURI){
              Invoke-RestMethod -uri $MostRecentArtifactURI -Token $Token -Authentication bearer -outfile ./state.zip
              Expand-Archive ./state.zip
              openssl enc -d -in ./state/terraform.tfstate.enc -aes-256-cbc -pbkdf2 -pass pass:"${{ secrets.ENCRYPTION_KEY }}" -out ./terraform.tfstate
            }
          }
          terraform plan -input=false -no-color -out tfplan
          terraform apply -input=false -no-color tfplan
          $StateExists = Test-Path -Path ./terraform.tfstate -PathType Leaf
          if ($StateExists){
            openssl enc -in ./terraform.tfstate -aes-256-cbc -pbkdf2 -pass pass:"${{ secrets.ENCRYPTION_KEY }}" -out ./terraform.tfstate.enc
            echo "artifactPath=$(pwd)/terraform.tfstate.enc" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
          echo $env:GITHUB_ENV
        shell: pwsh

      - name: Statefile artifact
        uses: actions/upload-artifact@v2
        with:
          name: terraformstatefile
          path: ${{ env.artifactPath }}
          if-no-files-found: error
