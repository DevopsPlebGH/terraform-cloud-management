name: Deploy on Test

on:
  push:
    branches: [main,dev, stage, test]
defaults:
  run:
    working-directory: ./terraform

jobs:
  inform_about_apply:
    name: Inform about apply
    runs-on: macos-latest

    steps:
      - name: Inform on pull-request that apply is running
        uses: mschick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            ***Running terraform apply***
            Results will display here momentarily...

  deploy_test:
    name: Deploy Test
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - environment: testing
            url: https://app.terraform.io/

    environment:
      name: ${{ matrix.environment }}
      url: ${{ matrix.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Initialize Terraform
        run: |
          terraform init -input=false

      - name: Plan Terraform
        id: plan
        continue-on-error: true
        run: |
          terraform plan -input=false -no-color -out=tfplan \
          && terraform show -no-color tfplan
        env:
          TF_VAR_admin_email: ${{ secrets.ADMIN_EMAIL }}
          TF_VAR_name: ${{ secrets.ORGANIZATION_NAME }}
          TF_VAR_oauth_token: ${{ secrets.OAUTH_TOKEN }}

      - name: Reformat Plan
        if: steps.plan.outcome == 'success'
        run: |
          echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt

      - name: Put Plan in Environment Variable
        if: steps.plan.outcome == 'success'
        run: |
          PLAN=$(cat plan.txt)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Apply Terraform
        if: steps.plan.outcome == 'success'
        id: apply
        continue-on-error: true
        env:
          TF_VAR_admin_email: ${{ secrets.ADMIN_EMAIL }}
          TF_VAR_name: ${{ secrets.ORGANIZATION_NAME }}
          TF_VAR_oauth_token: ${{ secrets.OAUTH_TOKEN }}
        run: |
          Get-ChildItem -Path Env: -Recurse -Include TF_VAR_* | ForEach-Object {Write-Output "$($_.Name)=$($_.Value)"} >> $env:GITHUB_ENV
          $Repo = "${{ github.repository }}"
          $BaseUri = "https://api.github.com"
          $ArtifactUri = "$BaseUri/repos/$Repo/actions/artifacts"
          $Token = "${{ github.token }}" | ConvertTo-SecureString -AsPlainText
          $RestResponse = Invoke-RestMethod -Authentication Bearer -Uri $ArtifactUri -Token $Token | Select-Object -ExpandProperty artifacts
          if ($RestResponse){
            $MostRecentArtifactURI = $RestResponse | Sort-Object -Property created_at -Descending | where name -eq "terraformstatefile" | Select-Object -First 1 | Select-Object -ExpandProperty archive_download_url
            Write-Host "Most recent artifact URI = $MostRecentArtifactURI"
            if ($MostRecentArtifactURI){
              Invoke-RestMethod -uri $MostRecentArtifactURI -Token $Token -Authentication bearer -outfile ./state.zip
              Expand-Archive ./state.zip
              openssl enc -d -in ./state/terraform.tfstate.enc -aes-256-cbc -pbkdf2 -pass pass:"${{ secrets.ENCRYPTION_KEY }}" -out ./terraform.tfstate
            }
          }
          terraform plan -input=false -no-color -out tfplan
          terraform apply -input=false -no-color tfplan
          $StateExists = Test-Path -Path ./terraform.tfstate -PathType Leaf
          if ($StateExists){
            openssl enc -in ./terraform.tfstate -aes-256-cbc -pbkdf2 -pass pass:"${{ secrets.ENCRYPTION_KEY }}" -out ./terraform.tfstate.enc
            echo "artifactPath=$(pwd)/terraform.tfstate.enc" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
          echo $env:GITHUB_ENV
        shell: pwsh

      - name: Statefile artifact
        uses: actions/upload-artifact@v2
        with:
          name: terraformstatefile
          path: ${{ env.artifactPath }}
          if-no-files-found: error

      - name: Post Plan and Apply to GitHub PR
        if: steps.plan.outcome == 'success' && steps.apply.outcome == 'success'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            Applying **${{ matrix.path }}**:
            ```diff
            ${{ env.PLAN }}
            ```

            ```
            ${{ steps.apply.outputs.stdout }}
            ```
      - name: Post Plan Failure
        if: steps.plan.outcome == 'failure'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            Plan failed for **${{ matrix.path }}**:
            ```
            ${{ steps.plan.outputs.stderr }}
            ```
      - name: Post Apply Failure
        if: steps.apply.outcome == 'failure'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            Apply failed for **${{ matrix.path }}**:

            ```
            ${{ steps.apply.outputs.stderr }}
            ```
      - name: Destroy Terraform
        if: steps.apply.outcome == 'failure'
        id: destroy
        continue-on-error: true
        run: |
          cd ${{ matrix.path }}
          terraform destroy \
            -input=false \
            -no-color \
            tfplan
